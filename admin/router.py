import logging

from fastapi import APIRouter, Depends
from starlette.requests import Request

from admin.logic import AdminLogic
from admin.schemas import ChangeUserStatusSchema
from admin.service import AdminService
from dependency import get_user_logic, get_admin_logic, get_admin_service
from users.logic import UserLogic
import logging
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from starlette.requests import Request

from dependency import get_user_logic, get_admin_service
from dependency import get_db_session as get_db

from users.logic import UserLogic
from admin.service import AdminService

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "/admin" –∏ —Ç–µ–≥–æ–º "admin"
router = APIRouter(prefix='/admin', tags=['admin'])
logger = logging.getLogger(__name__)

@router.get('/get_user/{user_id}')
async def get_user(request: Request,
                   user_id: int,
                   admin_service: AdminService = Depends(get_admin_service),
                   user_logic: UserLogic = Depends(get_user_logic)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É user_id.

    :param request: –û–±—ä–µ–∫—Ç HTTP-–∑–∞–ø—Ä–æ—Å–∞.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.
    :param admin_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :param user_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :return: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    admin_service.check_admin_privileges(request)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    return await user_logic.get_user_by_id(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è




@router.get('/get_all_users')
async def get_all_users(
    request: Request,
    db: Session = Depends(get_db),
    admin_service: AdminService = Depends(get_admin_service),
    user_logic: UserLogic = Depends(get_user_logic)
):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    :param request: –û–±—ä–µ–∫—Ç HTTP-–∑–∞–ø—Ä–æ—Å–∞.
    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param admin_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :param user_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :return: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        # üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        admin_service.check_admin_privileges(request)

        logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

        # üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await user_logic.get_all_users()
        if not users:
            logger.warning("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        logger.info("üìã –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        user_list = []
        for user in users:
            user_info = {
                "id": user.id,
                "username": user.username,
                "email": user.email,
                "registrationDate": user.registration_date.isoformat(),
                "role": "admin" if user.is_admin else "user",
                "status": user.status.name
            }
            user_list.append(user_info)

            # –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"üë§ {user.username} | Email: {user.email} | –ê–¥–º–∏–Ω: {user.is_admin}")

        return {"users": user_list, "last_updated": "now"}

    except HTTPException as http_exc:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {http_exc.detail}")
        raise http_exc
    except Exception as e:
        logger.exception("üí• –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")



@router.post('/change_user_status')
async def block_user(request: Request,
                     data: ChangeUserStatusSchema,
                     admin_logic: AdminLogic = Depends(get_admin_logic),
                     admin_service: AdminService = Depends(get_admin_service)):
    """
    –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞).

    :param request: –û–±—ä–µ–∫—Ç HTTP-–∑–∞–ø—Ä–æ—Å–∞.
    :param data: –°—Ö–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (user_id –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å).
    :param admin_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :param admin_service: –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    admin_service.check_admin_privileges(request)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    data = await admin_logic.change_user_status(data.user_id, data.status)  # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return data
