import logging
from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from connect_ai.schemas import UserMessage as UserMessageResponse
from messages.models import Message, Session as UserSession
from dependency import get_db
from uuid import UUID
import asyncio

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

router = APIRouter()

@router.get("/get_messages/{user_id}")
async def get_messages(
        user_id: str,
        db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ RabbitMQ)"""
    try:
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id: {user_id}")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ user_id
        user_id_uuid, user_id_is_uuid = None, False
        try:
            user_id_uuid = UUID(user_id.strip())
            user_id_is_uuid = True
        except ValueError:
            pass

        if user_id_is_uuid:
            sessions = (await db.execute(
                select(UserSession).where(UserSession.user_id == user_id_uuid)
            )).scalars().all()
        else:
            try:
                user_id_int = int(user_id.strip())
                sessions = (await db.execute(
                    select(UserSession).where(UserSession.user_id == user_id_int)
                )).scalars().all()
            except ValueError:
                logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")
                raise HTTPException(status_code=400, detail="Invalid user ID format")

        if not sessions:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è user_id: {user_id}")
            return {"status": "success", "message": "No sessions found", "messages": []}

        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π")

        session_ids = [session.session_id for session in sessions]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        result = await db.execute(
            select(Message).where(
                Message.session_id.in_(session_ids),
                Message.role == 'LEAD'
            )
        )
        messages = result.scalars().all()

        if not messages:
            logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è user_id: {user_id}")
            return {"status": "success", "message": "No messages found", "messages": []}

        logger.info(f"üí¨ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in messages:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.id} - {msg.text}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
        message_list = [{
            "session_id": msg.session_id,
            "message_id": msg.id,
            "text": msg.text,
            "created_at": msg.created_at.isoformat() if msg.created_at else None
        } for msg in messages]

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç: {json.dumps(message_list, ensure_ascii=False)}")

        return {
            "status": "success",
            "message": f"Found {len(messages)} messages for user {user_id}",
            "messages": message_list
        }

    except HTTPException:
        raise

    except Exception as e:
        logger.error(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail="Internal server error")
