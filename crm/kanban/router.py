import logging
from typing import List
from fastapi import APIRouter, Depends, HTTPException, status, WebSocket
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from crm.orders.models import Order
from crm.clients.models import Client
from crm.orders.schemas import OrderCreateSchema
from dependency import get_orders_logic, get_request_user_id, get_db
from sqlalchemy.orm import selectinload

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

router = APIRouter(prefix="/kanban", tags=["kanban"])


class WebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        logging.info(f"üîó WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {websocket.client}")

    def disconnect(self, websocket: WebSocket):
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
            logging.info(f"üî¥ –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {websocket.client}")

    async def broadcast(self, message: str):
        logging.info(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º: {message}")
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except Exception:
                self.disconnect(connection)


manager = WebSocketManager()


@router.post("/orders", response_model=dict)
async def create_order(
    order_data: OrderCreateSchema,
    db: AsyncSession = Depends(get_db),
    user_id: int = Depends(get_request_user_id)
):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
    –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å ‚Äì –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –∏–º—è.
    """
    logging.info(f"üìå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: user_id={user_id}, column_id={order_data.column_id}")

    if not user_id:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

    async with db.begin():
        # üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        existing_client = await db.execute(
            select(Client).where(Client.phone_number == order_data.client_phone)
        )
        client = existing_client.scalar_one_or_none()

        if client:
            # üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è, –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
            if client.name != order_data.client_name:
                logging.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ {client.phone_number} —Å '{client.name}' –Ω–∞ '{order_data.client_name}'")
                client.name = order_data.client_name
                db.add(client)
        else:
            # üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            client = Client(
                name=order_data.client_name,
                phone_number=order_data.client_phone
            )
            db.add(client)
            await db.flush()  # –ø–æ–ª—É—á–∞–µ–º client.id

        # ‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        new_order = Order(
            name=order_data.name,
            description=order_data.description,
            date_of_creation=order_data.date_of_creation.replace(tzinfo=None),
            date_of_send=order_data.date_of_send.replace(tzinfo=None) if order_data.date_of_send else None,
            address=order_data.address,
            delivery_method=order_data.delivery_method,
            price=order_data.price,
            client_id=client.id,
            column_id=order_data.column_id,
            status="CREATED",
        )
        db.add(new_order)
        await db.flush()
        await db.refresh(new_order)

    return {
        "status": "success",
        "order": {
            "id": new_order.id,
            "name": new_order.name,
            "description": new_order.description,
            "date_of_creation": new_order.date_of_creation.isoformat(),
            "date_of_send": new_order.date_of_send.isoformat() if new_order.date_of_send else None,
            "address": new_order.address,
            "delivery_method": new_order.delivery_method.value,
            "client": {
                "id": client.id,
                "name": client.name,
                "phone": client.phone_number
            },
            "price": new_order.price,
            "status": new_order.status.value,
            "columnId": new_order.column_id,
        },
    }



@router.get("/orders", response_model=list[dict])
async def get_orders(db: AsyncSession = Depends(get_db)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
    """
    try:
        async with db.begin():
            result = await db.execute(
                select(Order).options(selectinload(Order.client))  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å—Ä–∞–∑—É
            )
            orders = result.scalars().all()

        orders_list = [
            {
                "id": order.id,
                "name": order.name,  # ‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
                "description": order.description,
                "date_of_creation": order.date_of_creation.isoformat(),
                "createdAt": order.date_of_creation.isoformat(),
                "date_of_send": order.date_of_send.isoformat() if order.date_of_send else None,
                "address": order.address,
                "delivery_method": order.delivery_method.value if order.delivery_method else None,
                "client": {
                    "id": order.client.id if order.client else None,
                    "name": order.client.name if order.client else "–ù–µ —É–∫–∞–∑–∞–Ω",
                    "phone": order.client.phone_number if order.client else "–ù–µ —É–∫–∞–∑–∞–Ω"
                } if order.client else None,  # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª–∏–µ–Ω—Ç
                "price": order.price,
                "status": order.status.value if order.status else None,
                "columnId": order.column_id if order.column_id else "column-1"
            }
            for order in orders
        ]

        logging.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(orders_list)} –∑–∞–∫–∞–∑–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ")
        return orders_list

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}", exc_info=True)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤"
        )
