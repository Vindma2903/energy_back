from fastapi import Depends, security, Security, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from starlette import status

from admin.logic import AdminLogic
from admin.service import AdminService
from crm.clients.logic import ClientLogic
from crm.orders.logic import OrderLogic
from exceptions import TokenExpiredException, TokenNotCorrectException
from infrastructure.database.config import get_db_session
from infrastructure.mail.service import MailService
from settings import Settings
from users.auth.service import AuthService
from users.logic import UserLogic

from fastapi import Depends, Request, Security, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import jwt, JWTError
import logging  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from fastapi import WebSocketException
from fastapi import WebSocket

from sqlalchemy.ext.asyncio import AsyncSession
from infrastructure.database.config import get_db_session

async def get_db() -> AsyncSession:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async for session in get_db_session():
        yield session



def get_settings():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ `.env` —Ñ–∞–π–ª–∞.
    """
    return Settings()


def get_orders_logic(db_session: AsyncSession = Depends(get_db_session)) -> OrderLogic:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :return: –û–±—ä–µ–∫—Ç OrderLogic.
    """
    return OrderLogic(db_session=db_session)


def get_client_logic(db_session: AsyncSession = Depends(get_db_session)) -> ClientLogic:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :return: –û–±—ä–µ–∫—Ç ClientLogic.
    """
    return ClientLogic(db_session=db_session)


def get_user_logic(db_session: AsyncSession = Depends(get_db_session)) -> UserLogic:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :return: –û–±—ä–µ–∫—Ç UserLogic.
    """
    return UserLogic(db_session=db_session)


def get_mail_service(settings: Settings = Depends(get_settings),
                     user_logic: UserLogic = Depends(get_user_logic)) -> MailService:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–∏—Å–µ–º.
    :param settings: –û–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    :param user_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :return: –û–±—ä–µ–∫—Ç MailService.
    """
    return MailService(settings=settings, user_logic=user_logic)


def get_auth_service(user_logic: UserLogic = Depends(get_user_logic),
                     settings: Settings = Depends(get_settings)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    :param user_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :param settings: –û–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    :return: –û–±—ä–µ–∫—Ç AuthService.
    """
    return AuthService(user_logic=user_logic, settings=settings)


reusable_oauth2 = security.HTTPBearer()


async def get_request_user_id(
    request: Request = None,
    websocket: WebSocket = None,
    auth_service: AuthService = Security(get_auth_service),
    token: HTTPAuthorizationCredentials = Security(reusable_oauth2),
    settings: Settings = Depends(get_settings),
) -> int:
    try:
        logging.info("üîç [AUTH] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞...")
        if websocket:
            ws_token = websocket.query_params.get("token") or websocket.headers.get("Sec-WebSocket-Protocol")
            logging.info(f"üõÇ [WebSocket] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {ws_token}")
            if not ws_token:
                logging.error("‚ùå [WebSocket] –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!")
                await websocket.close(code=1008)
                raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION, reason="–¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω")
            try:
                user_id = auth_service.get_user_id_from_token(ws_token)
                logging.info(f"‚úÖ [WebSocket] –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω user_id={user_id}")
                return user_id
            except JWTError as e:
                logging.error(f"‚ùå [WebSocket] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                await websocket.close(code=1008)
                raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION, reason="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")

        if token:
            token_str = token.credentials
            logging.info(f"üõÇ [HTTP] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: {token_str}")
            try:
                user_id = auth_service.get_user_id_from_token(token_str)
                logging.info(f"‚úÖ [HTTP] –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω user_id={user_id}")
                return user_id
            except JWTError as e:
                logging.error(f"‚ùå [HTTP] –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")

        logging.error("‚ùå [AUTH] –¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∏ –≤ WebSocket, –Ω–∏ –≤ HTTP-–∑–∞–ø—Ä–æ—Å–µ!")
        raise Exception("–¢–æ–∫–µ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∏ –≤ WebSocket-–∑–∞–ø—Ä–æ—Å–µ, –Ω–∏ –≤ HTTP-–∑–∞–ø—Ä–æ—Å–µ!")
    except Exception as e:
        logging.error(f"‚ùå [AUTH] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise e





def get_admin_service(auth_service: AuthService = Depends(get_auth_service)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.
    :param auth_service: –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    :return: –û–±—ä–µ–∫—Ç AdminService.
    """
    return AdminService(auth_service)


def get_admin_logic(db_session: AsyncSession = Depends(get_db_session),
                    user_logic: UserLogic = Depends(get_user_logic)):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ª–æ–≥–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    :param user_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :return: –û–±—ä–µ–∫—Ç AdminLogic.
    """
    return AdminLogic(db_session=db_session, user_logic=user_logic)