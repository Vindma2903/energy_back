from sqlalchemy import select, update, insert
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
from uuid import uuid4
from messages.models import Message, Session, Lead
from get_message.schemas import MessageCreate
from logging_config import logger

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def create_message(db: AsyncSession, message: MessageCreate):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é.
    """
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.sender} –≤ session_id: {message.session_id}")

    try:
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
        session = await get_session(db, message.session_id)
        if not session:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {message.session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é.")
            message.session_id = await create_session(db)

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
        await update_last_active(db, message.session_id)

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏–¥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        lead = await get_lead_by_session(db, message.session_id)
        if not lead:
            logger.warning(f"‚ö†Ô∏è –õ–∏–¥ –¥–ª—è session_id {message.session_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ.")
            lead = await create_lead(db, message.session_id)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        db_message = Message(
            text=message.text,
            sender=message.sender,
            session_id=message.session_id,  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ session_id
        )

        db.add(db_message)
        await db.commit()
        await db.refresh(db_message)

        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ (ID: {db_message.id}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è session_id: {message.session_id}")

        return {
            "id": db_message.id,
            "text": db_message.text,
            "sender": db_message.sender,
            "session_id": db_message.session_id,
            "lead": {
                "id": lead.id if lead else None,
                "first_name": lead.first_name if lead else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
                "last_name": lead.last_name if lead else "",
            },
        }

    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        raise


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–∞ –ø–æ session_id
async def get_lead_by_session(db: AsyncSession, session_id: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏–¥–µ—Ä (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    try:
        query = select(Lead).where(Lead.session_id == session_id)
        result = await db.execute(query)
        lead = result.scalars().first()

        if lead:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ª–∏–¥ –¥–ª—è session_id: {session_id} (ID: {lead.id})")
        else:
            logger.warning(f"‚ö†Ô∏è –õ–∏–¥ –¥–ª—è session_id: {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        return lead
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–¥–∞ –¥–ª—è session_id {session_id}: {str(e)}")
        return None


# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞
async def create_lead(db: AsyncSession, session_id: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –ª–∏–¥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.
    """
    try:
        new_lead = Lead(
            first_name="–ù–æ–≤—ã–π",
            last_name="–õ–∏–¥",
            session_id=session_id,
        )
        db.add(new_lead)
        await db.commit()
        await db.refresh(new_lead)
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ª–∏–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è session_id: {session_id}")
        return new_lead
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–¥–∞: {str(e)}")
        raise


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è session_id
async def get_messages_for_user(db: AsyncSession, session_id: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ session_id).
    """
    try:
        logger.info(f"üì© –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è session_id: {session_id}")

        query = select(Message).where(Message.session_id == session_id)
        result = await db.execute(query)
        messages = result.scalars().all()

        logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è session_id: {session_id}")
        return messages
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        raise


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
async def get_or_create_session(db: AsyncSession, session_id: str) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏. –ï—Å–ª–∏ –µ—ë –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é.
    """
    try:
        session = await get_session(db, session_id)
        if session:
            await update_last_active(db, session_id)
            return session_id
        else:
            return await create_session(db)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
        raise


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ session_id
async def get_session(db: AsyncSession, session_id: str):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ session_id.
    """
    try:
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ —Å session_id: {session_id}")
        query = select(Session).where(Session.session_id == session_id)
        result = await db.execute(query)
        session = result.scalar_one_or_none()

        if session:
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞: {session_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {session_id}")

        return session
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
        raise


# ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
async def update_last_active(db: AsyncSession, session_id: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏.
    """
    try:
        logger.info(f"‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è session_id: {session_id}")
        query = (
            update(Session)
            .where(Session.session_id == session_id)
            .values(last_active=datetime.utcnow())
        )
        await db.execute(query)
        await db.commit()
        logger.info(f"‚úÖ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è session_id: {session_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str(e)}")
        raise


# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
async def create_session(db: AsyncSession) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        new_session_id = str(uuid4())
        logger.info(f"üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {new_session_id}")

        query = insert(Session).values(
            session_id=new_session_id,
            created_at=datetime.utcnow(),
            last_active=datetime.utcnow()
        )

        await db.execute(query)
        await db.commit()
        logger.info(f"‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {new_session_id}")
        return new_session_id
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {str(e)}")
        raise
