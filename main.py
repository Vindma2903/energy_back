from fastapi import FastAPI, Request
from starlette.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
from fastapi.responses import JSONResponse
import logging
from rabbit.producer import send_message  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from rabbit.consumer import consume  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
import asyncio
from rabbit.schemas import MessageRequest  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from admin.router import router as admin_router
from crm.clients.router import router as client_router
from users.auth.router import router as auth_router  # ‚úÖ –†–æ—É—Ç–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
from crm.kanban.router import router as kanban_router

from connect_ai.router import router as connect_ai_router
from settings import Settings
from messages.router import send_to_rabbitmq
from messages.router import router as messages_router

# ‚úÖ –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(openapi_url="/openapi.json", docs_url="/docs", redoc_url="/redoc")

# ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
settings = Settings()

# ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
app.include_router(client_router)
app.include_router(auth_router)  # /auth –º–∞—Ä—à—Ä—É—Ç—ã (–≤–∫–ª—é—á–∞—è /home –∏ /check)
app.include_router(admin_router)
app.include_router(kanban_router)
app.include_router(messages_router, prefix="/messages", tags=["Messages"])  # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
app.include_router(messages_router)

app.include_router(connect_ai_router, prefix="/connect_ai", tags=["ConnectAI"])

# ‚úÖ Middleware –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è CORS (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://127.0.0.1:3000", "http://localhost:3000", "http://localhost:3001"],
    allow_methods=["*"],
    allow_headers=["*"],  # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    allow_credentials=True,  # –†–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É cookies/credentials
)

# ‚úÖ Middleware –¥–ª—è —Å–µ—Å—Å–∏–π
app.add_middleware(
    SessionMiddleware,
    secret_key=settings.SESSION_SECRET_KEY,
    session_cookie="session",
)

# ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
logger = logging.getLogger("uvicorn")
logging.basicConfig(level=logging.INFO)

@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å: {request.method} {request.url}")
    response = await call_next(request)
    logger.info(f"üì§ –û—Ç–≤–µ—Ç: {response.status_code}")
    return response

# ‚úÖ –ü—Ä–∏–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
@app.get("/")
async def read_root():
    return {"message": "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"}

# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS
@app.get("/test-cors")
async def test_cors():
    response = JSONResponse(content={"message": "CORS —Ä–∞–±–æ—Ç–∞–µ—Ç!"})
    response.headers["Access-Control-Allow-Origin"] = "*"
    return response

# ‚úÖ –ü—Ä–∏–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ RabbitMQ

@app.post("/send-message/")
async def send_message_endpoint(data: MessageRequest):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å RabbitMQ
    await send_to_rabbitmq(data.dict())
    return {"message": "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ RabbitMQ!"}

# ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º Consumer –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π (consume) –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(consume())  # –ó–∞–ø—É—Å–∫–∞–µ–º consume –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

