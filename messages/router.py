from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy.orm import joinedload
from datetime import datetime, timedelta
import uuid
import logging

from infrastructure.database.config import get_db_session
from messages.models import Message, Session as UserSession, Lead, MessageRole
from messages.schemas import MessageCreate, MessageResponse
from sqlalchemy.orm import selectinload  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º selectinload
from fastapi import APIRouter, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from messages.schemas import SessionCreate, SessionResponse  # –ò–º–ø–æ—Ä—Ç —Å—Ö–µ–º

from sqlalchemy.future import select
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime
import uuid
import logging
import aio_pika
import json
from datetime import timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

SESSION_LIFETIME = timedelta(minutes=2) # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏


# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_or_create_session(user_id: str, db: AsyncSession) -> str:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è `user_id`. –ï—Å–ª–∏ –µ—ë –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ (–±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç),
    —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é.
    """
    async with db.begin():
        result = await db.execute(select(UserSession).filter(UserSession.user_id == user_id))
        existing_session = result.scalars().first()

        if existing_session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (–±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç)
            if datetime.utcnow() - existing_session.last_active > SESSION_LIFETIME:
                # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                logger.info(f"‚è≥ –°–µ—Å—Å–∏—è {existing_session.session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫–ª–∞, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é...")
                return await create_new_session(user_id, db)
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º `last_active` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
                existing_session.last_active = datetime.utcnow()
                await db.commit()
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {existing_session.session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return existing_session.session_id

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        return await create_new_session(user_id, db)

async def create_new_session(user_id: str, db: AsyncSession) -> str:
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    session_id = str(uuid.uuid4())
    new_session = UserSession(
        session_id=session_id,
        user_id=user_id,
        created_at=datetime.utcnow(),
        last_active=datetime.utcnow(),
    )
    db.add(new_session)
    await db.commit()
    await db.refresh(new_session)
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {new_session.session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return new_session.session_id


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ `session_id`
@router.get("/history/")
async def get_message_history(session_id: str, db: AsyncSession = Depends(get_db_session)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ `session_id`.
    """
    result = await db.execute(
        select(Message)
        .filter(Message.session_id == session_id)
        .order_by(Message.id.asc())  # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É
    )
    messages = result.scalars().all()

    if not messages:
        raise HTTPException(status_code=404, detail="–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return {
        "messages": [{"text": msg.text, "sender": msg.sender} for msg in messages]
    }

@router.get("/leads/with-last-message")
async def get_chats_with_last_message(db: AsyncSession = Depends(get_db_session)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π (—á–∞—Ç–æ–≤) —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    """
    result = await db.execute(
        select(UserSession)
        .options(
            selectinload(UserSession.messages),  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º selectinload –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
            selectinload(UserSession.lead)  # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏–¥–∞
        )
    )

    sessions = result.unique().scalars().all()  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º .unique(), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º

    if not sessions:
        raise HTTPException(status_code=404, detail="–ß–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    chats = []
    for session in sessions:
        last_message = session.messages[-1].text if session.messages else "–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç"
        last_message_time = session.messages[
            -1].created_at if session.messages else None  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        chats.append({
            "session_id": session.session_id,
            "lead": {
                "first_name": session.lead.first_name if session.lead else None,
                "last_name": session.lead.last_name if session.lead else None,
            },
            "last_message": last_message,
            "last_message_time": last_message_time.isoformat() if last_message_time else None
        })

    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤")
    return chats


async def send_to_rabbitmq(message_data, db_session):
    RABBITMQ_URL = "amqp://localhost/"
    QUEUE_NAME = "message_queue"

    try:
        # 1. –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        result = await db_session.execute(
            select(Message).where(Message.id == message_data["id"])
        )
        message = result.scalars().first()

        if not message:
            logger.error(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {message_data['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
            return

        message.is_sent_to_rabbitmq = True
        await db_session.commit()
        logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è {message_data['id']} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è'")

        # 2. –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ RabbitMQ
        connection = await aio_pika.connect_robust(RABBITMQ_URL)
        async with connection:
            channel = await connection.channel()
            await channel.set_qos(prefetch_count=1)

            queue = await channel.declare_queue(QUEUE_NAME, durable=True)

            message_body = json.dumps(message_data)
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ RabbitMQ: {message_body}")

            await channel.default_exchange.publish(
                aio_pika.Message(
                    body=message_body.encode(),
                    delivery_mode=aio_pika.DeliveryMode.PERSISTENT
                ),
                routing_key=QUEUE_NAME
            )

            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ RabbitMQ: {message_body}")

    except Exception as e:
        # 3. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        await db_session.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ RabbitMQ: {e}. –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω.")
        raise


# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.post("/", response_model=MessageResponse)
async def receive_message(message_data: MessageCreate, db: AsyncSession = Depends(get_db_session)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –±–æ—Ç–∞ –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ —Å–µ—Å—Å–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î.
    """

    if not message_data.session_id:
        raise HTTPException(status_code=400, detail="session_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è
    result = await db.execute(select(UserSession).filter(UserSession.session_id == message_data.session_id))
    session = result.scalars().first()

    if not session:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message = Message(
        text=message_data.text,
        sender=message_data.sender,
        role=message_data.role,
        session_id=message_data.session_id,
        created_at=datetime.utcnow()
    )

    db.add(new_message)
    await db.commit()
    await db.refresh(new_message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ RabbitMQ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ BOT
    if message_data.role != "BOT":
        message_data_for_rabbitmq = {
            "session_id": new_message.session_id,
            "id": new_message.id,
            "text": new_message.text,
            "sender": new_message.sender,
            "created_at": new_message.created_at.isoformat() if new_message.created_at else None
        }
        await send_to_rabbitmq(message_data_for_rabbitmq, db)
    else:
        logger.info(f"üì¶ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ RabbitMQ, id={new_message.id}")

    return {"message": "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ", "session_id": message_data.session_id}


@router.get("/messages/by-session/{session_id}")
async def get_lead_and_bot_messages(session_id: str, db: AsyncSession = Depends(get_db_session)):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–æ–ª—è–º–∏ LEAD –∏ BOT –ø–æ session_id,
    –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è.
    """
    result = await db.execute(
        select(Message)
        .filter(
            Message.session_id == session_id,
            Message.role.in_(["LEAD", "BOT"])
        )
        .order_by(Message.created_at.asc())
    )
    messages = result.scalars().all()

    if not messages:
        raise HTTPException(status_code=404, detail="–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    return {
        "session_id": session_id,
        "messages": [
            {
                "id": msg.id,
                "text": msg.text,
                "sender": msg.sender,
                "role": msg.role.value if hasattr(msg.role, "value") else msg.role,
                "created_at": msg.created_at.isoformat() if msg.created_at else None
            }
            for msg in messages
        ]
    }


async def cleanup_expired_sessions(db: AsyncSession):
    """
    –û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–µ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏—Å—å –±–æ–ª–µ–µ 2 –º–∏–Ω—É—Ç.
    """
    cutoff_time = datetime.utcnow() - SESSION_LIFETIME
    result = await db.execute(select(UserSession).filter(UserSession.last_active < cutoff_time))
    expired_sessions = result.scalars().all()

    for session in expired_sessions:
        await db.delete(session)
        await db.commit()
        logger.info(f"‚ùå –°–µ—Å—Å–∏—è {session.session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {session.user_id} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ (–∏—Å—Ç–µ–∫–ª–∞)")


