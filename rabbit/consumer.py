import aio_pika
import logging
import asyncio

logger = logging.getLogger("uvicorn")
logging.basicConfig(level=logging.INFO)


async def callback(message: aio_pika.IncomingMessage):
    try:
        async with message.process():
            body = message.body.decode()
            logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ: {body}")
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        await message.reject(requeue=False)


async def consume():
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ Consumer")
    try:
        connection = await aio_pika.connect_robust("amqp://localhost/")
        async with connection:
            channel = await connection.channel()
            await channel.set_qos(prefetch_count=1)

            # –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            queue = await channel.declare_queue(
                'my_queue',
                durable=True,
                arguments={
                    'x-message-ttl': 86400000,  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (1 –¥–µ–Ω—å)
                    'x-max-length': 10000       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏
                }
            )

            await queue.consume(callback)
            logger.info("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
            await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    try:
        asyncio.run(consume())
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
