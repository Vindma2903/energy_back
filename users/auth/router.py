import logging
from fastapi import APIRouter, Depends, HTTPException, BackgroundTasks, Request
from starlette import status
from starlette.responses import JSONResponse



from dependency import get_auth_service, get_user_logic, get_mail_service
from exceptions import UserNotFoundException, UserNotCorrectPasswordException, UserNotConfirmedByAdminException
from infrastructure.mail.service import MailService
from users.auth.service import AuthService
from users.logic import UserLogic
from users.schemas import UserLoginSchema, UserCreateSchema, ResetPasswordRequest
from dotenv import load_dotenv
import os
from fastapi.security import OAuth2PasswordBearer
from jose import jwt, JWTError
from dependency import get_request_user_id
from fastapi import Response  # –î–æ–±–∞–≤–∏–ª Response –¥–ª—è `set_cookie`

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
router = APIRouter(prefix='/auth', tags=['auth'])

load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
JWT_SECRET_KEY = os.getenv("JWT_SECRET_KEY", "default_secret_key")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–µ—Ç
JWT_ALGORITHM = os.getenv("JWT_DECODE_ALGORITHM", "HS256")

# –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
logger = logging.getLogger(__name__)




@router.post("/login", name="login_post")
async def login_post(
        request: Request,
        response: Response,  # –ü–µ—Ä–µ–¥–∞—ë–º Response –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        data: UserLoginSchema,
        auth_service: AuthService = Depends(get_auth_service),
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç email –∏ –ø–∞—Ä–æ–ª—å.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    """
    try:
        user = await auth_service.login(email=data.email, password=data.password)
        access_token = user.access_token  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ user_id
        user_id = getattr(user, "user_id", None) or getattr(user, "id", None)
        if not user_id:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # üìå **–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ cookies**
        response.set_cookie(
            key="access_token",
            value=access_token,
            httponly=True,  # –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
            samesite="None",  # üî• –î–û–õ–ñ–ù–û –ë–´–¢–¨ `None`, –∏–Ω–∞—á–µ `cookies` –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å —Ñ—Ä–æ–Ω—Ç–∞
            secure=False,  # üî• `False` –¥–ª—è localhost, `True` –µ—Å–ª–∏ HTTPS
            max_age=3600,  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ (1 —á–∞—Å)
            expires=3600,  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
            path="/",  # Cookies –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
        )

        return {
            "status": "authorized",
            "user": {
                "id": user_id,
                "username": user.username,
                "email": user.email,
            },
            "access_token": access_token,  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ JSON
        }

    except UserNotFoundException as e:
        raise HTTPException(status_code=404, detail=e.detail)
    except UserNotCorrectPasswordException as e:
        raise HTTPException(status_code=404, detail=e.detail)
    except UserNotConfirmedByAdminException as e:
        raise HTTPException(status_code=403, detail=e.detail)


# –î–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/auth/login")


@router.get("/check", name="check_auth")
async def check_auth(
        request: Request,
        user_logic: UserLogic = Depends(get_user_logic),
        user_id: int = Depends(get_request_user_id),
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.
    """
    # üîç –õ–æ–≥–∏—Ä—É–µ–º cookies
    print("üîé Cookies –≤ –∑–∞–ø—Ä–æ—Å–µ:", request.cookies)

    if not user_id:
        print("‚ùå –û—à–∏–±–∫–∞: `user_id` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")

    # üîç –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
    user = await user_logic.get_user_by_id(user_id=user_id)
    print("üîé –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user)

    if not user:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `is_admin`, –∞ –Ω–µ `role`
    is_admin = user.is_admin
    role = "admin" if is_admin else "user"  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å

    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: ID={user.id}, Username={user.username}, Role={role}, IsAdmin={is_admin}")

    return {
        "status": "authorized",
        "user": {
            "id": user.id,
            "username": user.username,
            "email": user.email,
            "status": user.status,
            "role": role,  # ‚úÖ –¢–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º `role`
            "is_admin": is_admin
        },
    }






@router.get("/home", name="home_page")
async def home_page(token: str = Depends(oauth2_scheme)):
    """
    –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.

    :param token: –¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç—É–ø–µ –∫ –¥–æ–º–∞—à–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    """
    try:
        payload = jwt.decode(token, JWT_SECRET_KEY, algorithms=[JWT_ALGORITHM])
        user_id = payload.get("sub")
        if not user_id:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
            )
        return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!", "user_id": user_id}
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
        )

@router.post("/registration")
async def registration_post(
        data: UserCreateSchema,
        user_logic: UserLogic = Depends(get_user_logic),
        background_tasks: BackgroundTasks = BackgroundTasks(),
        mail_service: MailService = Depends(get_mail_service)
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ email –≤ –±–∞–∑–µ.
    - –°–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.

    :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param user_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :param background_tasks: –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.
    :param mail_service: –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user = await user_logic.get_user_by_email(email=data.email)
    if user:
        logger.warning(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. Email {data.email} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
        raise HTTPException(status_code=400, detail="–≠—Ç–æ—Ç email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.")
    new_user = await user_logic.create_user(
        UserCreateSchema(username=data.username, email=data.email, password=data.password))
    background_tasks.add_task(mail_service.send_confirmation_email, new_user)
    return {"message": f"user {new_user.email} created"}

@router.post("/recovery_password")
async def recovery_password_post(
        email: str,
        background_tasks: BackgroundTasks = BackgroundTasks(),
        mail_service: MailService = Depends(get_mail_service),
        user_logic: UserLogic = Depends(get_user_logic),
):
    """
    –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é.

    :param email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param background_tasks: –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏.
    :param mail_service: –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º.
    :param user_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ –æ—à–∏–±–∫–∞.
    """
    logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –¥–ª—è email: {email}.")
    user = await user_logic.get_user_by_email(email=email)
    if user:
        logger.info(f"–ü–∏—Å—å–º–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}.")
        background_tasks.add_task(mail_service.send_reset_password_email, user)
        return {"message": f"–ü–∏—Å—å–º–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}"}
    logger.warning(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email {email} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.post("/reset_password/{token}")
async def reset_password_post(
        token: str,
        request: ResetPasswordRequest,
        mail_service: MailService = Depends(get_mail_service),
        user_logic: UserLogic = Depends(get_user_logic),
):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param token: –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.
    :param request: –ó–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.
    :param mail_service: –°–µ—Ä–≤–∏—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º.
    :param user_logic: –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è.
    """
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è.")
    user = await mail_service.verify_reset_password_token(token)
    if not user:
        logger.error("–¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω.")
    await user_logic.change_user_password(user_id=user.id, password=request.password)
    logger.info(f"–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
    return {'message': f'–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.'}

@router.post("/logout", name="logout")
async def logout(request: Request):
    """
    –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    - –£–¥–∞–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∏–∑ —Å–µ—Å—Å–∏–∏.

    :param request: –û–±—ä–µ–∫—Ç HTTP-–∑–∞–ø—Ä–æ—Å–∞.
    :return: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã—Ö–æ–¥–µ –∏–ª–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    if "access_token" in request.session:
        request.session.pop("access_token")
        response = JSONResponse(
            {"message": "Logout successful"},
            status_code=200
        )
        response.delete_cookie("my_session")
        return response
    else:
        return JSONResponse(
            {"message": "No active session found"}, status_code=400
        )
